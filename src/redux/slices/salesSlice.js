// Import the createSlice function from Redux Toolkit
import { createSlice } from '@reduxjs/toolkit';

// Define the initial state of the sales slice
const initialState = {
  activeTab: 'dashboard',
  data: [
    {
      "reference": "P001",
      "nom": "Ordinateur Portable",
      "prix": 12000,
      "image": "./images/laptop.jpg",
      "categorie": "Informatique",
      "ventes_mensuelles": [10, 15, 12, 8, 20, 18, 22, 25, 19, 30, 28, 35],
      "description": "Ordinateur portable de dernière génération",
      "stock": 50,
      "marge": 30,
      "date_creation": "2023-01-15"
    },
    {
      "reference": "P002",
      "nom": "Smartphone",
      "prix": 8000,
      "image": "./images/smartphone1.jpg",
      "categorie": "Informatique",
      "ventes_mensuelles": [25, 30, 22, 18, 35, 40, 38, 50, 45, 55, 60, 70],
      "description": "Smartphone premium avec écran OLED",
      "stock": 75,
      "marge": 40,
      "date_creation": "2023-02-20"
    },
    {
      "reference": "P003",
      "nom": "Casque Audio",
      "prix": 1500,
      "image": "./images/headphone.jpg",
      "categorie": "Accessoires",
      "ventes_mensuelles": [12, 18, 15, 20, 22, 30, 35, 40, 42, 38, 50, 55],
      "description": "Casque audio sans fil avec annulation de bruit",
      "stock": 100,
      "marge": 25,
      "date_creation": "2023-03-10"
    },
    {
      "reference": "P004",
      "nom": "Téléviseur 4K",
      "prix": 9000,
      "image": "./images/tv.jpg",
      "categorie": "Électronique",
      "ventes_mensuelles": [8, 12, 15, 10, 20, 18, 22, 30, 35, 28, 32, 40],
      "description": "Téléviseur 4K Ultra HD",
      "stock": 30,
      "marge": 35,
      "date_creation": "2023-04-05"
    },
    {
      "reference": "P005",
      "nom": "Tablette",
      "prix": 5000,
      "image": "./images/tablet.jpg",
      "categorie": "Informatique",
      "ventes_mensuelles": [14, 20, 18, 22, 28, 30, 25, 35, 40, 38, 42, 45],
      "description": "Tablette tactile haute performance",
      "stock": 60,
      "marge": 28,
      "date_creation": "2023-05-15"
    },
    {
      "reference": "P006",
      "nom": "Enceinte Bluetooth",
      "prix": 1200,
      "image": "./images/speaker.jpg",
      "ventes_mensuelles": [18, 22, 25, 28, 30, 35, 40, 42, 38, 50, 55, 60],
      "description": "Enceinte Bluetooth portable",
      "stock": 80,
      "marge": 20,
      "date_creation": "2023-06-01"
    }
  ],
  selectedCategory: 'all',
  activeTab: 'dashboard',
  filters: {
    dateRange: 'all',
    priceRange: [0, 100000],
    stockStatus: 'all'
  },
  statistics: {
    totalRevenue: 0,
    totalSales: 0,
    averageOrderValue: 0,
    conversionRate: 0,
    customerSatisfaction: 85,
    churnRate: 5
  },
  settings: {
    currency: 'MAD',
    dateFormat: 'DD/MM/YYYY',
    darkMode: false,
    notifications: true
  }
};

// Create the sales slice with reducers
const salesSlice = createSlice({
  name: 'sales',
  initialState,
  reducers: {
    setSelectedCategory: (state, action) => {
      state.selectedCategory = action.payload;
    },
    setActiveTab: (state, action) => {
      state.activeTab = action.payload;
    },
    setData: (state, action) => {
      state.data = action.payload;
    },
    setFilters: (state, action) => {
      state.filters = action.payload;
    },
    setStatistics: (state, action) => {
      state.statistics = action.payload;
    },
    setSettings: (state, action) => {
      state.settings = action.payload;
    },
    updateProduct: (state, action) => {
      const { reference, updates } = action.payload;
      const productIndex = state.data.findIndex(p => p.reference === reference);
      if (productIndex !== -1) {
        state.data[productIndex] = { ...state.data[productIndex], ...updates };
      }
    },
    addProduct: (state, action) => {
      state.data.push(action.payload);
    },
    removeProduct(state, action) {
      state.data = state.data.filter(product => product.reference !== action.payload);
    },
    deleteProduct(state, action) {
      state.data = state.data.filter(product => product.reference !== action.payload);
    }
  }
});

// Export the actions generated by createSlice
export const { 
  setSelectedCategory, 
  setActiveTab, 
  setData, 
  setFilters,
  setStatistics,
  setSettings,
  updateProduct, 
  addProduct, 
  removeProduct,
  deleteProduct 
} = salesSlice.actions;

// Selectors
export const selectAllProducts = (state) => state.sales.data;
export const selectProductById = (state, productId) => 
  state.sales.data.find(product => product.reference === productId);

export const selectFilteredProducts = (state, searchTerm = '') => {
  const products = selectAllProducts(state);
  if (!searchTerm) return products;
  
  const term = searchTerm.toLowerCase();
  return products.filter(product => 
    product.nom.toLowerCase().includes(term) ||
    (product.categorie && product.categorie.toLowerCase().includes(term)) ||
    product.reference.toLowerCase().includes(term)
  );
};

export const selectCategories = (state) => {
  const categories = new Set();
  state.sales.data.forEach(product => {
    if (product.categorie) {
      categories.add(product.categorie);
    }
  });
  return Array.from(categories);
};

// Export the reducer generated by createSlice
export default salesSlice.reducer;